#!/bin/bash

#   HLApipeline
#
#   Authors:    Limin Jiang (lxj423@med.miami.edu)
#   Date:       2023-12-20
#   Version:    0.1.0
# Default values

#######################################Help#########################################

display_help() {
  echo "Usage: $0 [-SwithB | -SwithF] -i <Parameter1> -v <Parameter2> -er <Parameter3> -c <Parameter4> -o <Parameter5>  -p <Parameter6> [-ex]"
  echo "Options:"
  echo "  -SwithB  Input alignment BAM file."
  echo "  -SwithF  Input FASTQ file."
  echo "  -i       Set the input directory and filename. Example: 'data/outfile.bam'."
  echo "  -v       Input parameter or file name. 
	   If using -SwithB, specify the genome version with '-v hg37' or '-v hg38'. 
	   If using -SwithF, specify FASTQ file(s) with '-i file1,file2' (two files) or '-i file' (one file)."

  echo "  -o       Set the output directory and filename. Example: 'data/outfile'."
  echo "  -ex      Specify whether to output gene expression values(default: false)."
  echo "  -er      Specify the sequencing error ratio (default: 0.02)."
  echo "  -c       Specify min number of supported reads (default: 0)."  
  echo "  -n       Max mismatches in seed (default: -n 0)."
  echo "  --help   Display this help message."
  exit 0
}


#######################################predefine#########################################

swithB=false
SwithF=false
param_ex="false"
param_v=""
param_i=""
param_o=""
param_er=0.02
param_c=0
param_p="(1/3,1/3,1/3)"
param_n=0


#######################################Process command line options#######################

while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -SwithB)
      swithB=true
	  swithF=false
      ;;
    -SwithF)
      swithF=true
	  swithB=false
      ;;
    -i)
      param_i="$2"
      shift
      ;;
    -v)
      param_v="$2"
      shift
      ;;
    -o)
      param_o="$2"
      shift
      ;;
    -ex)
      param_ex="true"
      ;;
	-er)
      param_er="$2"
      shift
      ;;
	-c)
      param_c="$2"
      shift
      ;;
	-p)
      param_p="$2"
      shift
      ;;
    -n)
      param_n="$2"
      shift
      ;;
    --help)
      display_help
      ;;
    *)
      echo "Invalid option: $1" >&2
      display_help
      ;;
  esac
  shift
done


if [ "$param_ex" != "true" ]; then
  param_ex="false"
fi

# Validate options
if [[ ($swithB != true && $swithF != true) || ($swithB == true && $swithF == true) || -z $param_i || -z $param_o ]]; then
  echo "Error: Please provide either -SwithB or -SwithF, and make sure to include -i and -o options."
  display_help
fi


#######################################software########################################
#echo ". code/HLAdetector $swithB $swithF $param_i $param_o $param_ex $param_v $param_er $param_c $param_n $param_p"
#. code/HLAdetector $swithB $swithF $param_i $param_o $param_ex $param_v $param_er $param_c $param_n $param_p
# Print the values
parameters=(
    "$swithB"
    "$swithF"
    "$param_i"
    "$param_o"
    "$param_ex"
    "$param_v"
    "$param_er"
    "$param_c"
    "$param_n"
    "$param_p"
)



. code/HLAdetector "${parameters[@]}"

echo "SwithB: $swithB"
echo "SwithF: $swithF"
echo "Parameter 1 (-i): $param_i" 
echo "Parameter 2 (-o): $param_o" 
echo "Parameter 3 (-ex): $param_ex"
echo "Parameter 4 (-v): $param_v"
echo "Parameter 5 (-er): $param_er"
echo "Parameter 6 (-c): $param_c"
echo "Parameter 7 (-p): $param_p"
echo "Parameter 8 (-n): $param_n"

